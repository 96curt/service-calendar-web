/**
 * Service Calendar API
 * Mockup Service Calendar API
 *
 * The version of the OpenAPI document: 0.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { Comment } from '../model/comment';
// @ts-ignore
import { JobSite } from '../model/jobSite';
// @ts-ignore
import { Manager } from '../model/manager';
// @ts-ignore
import { OrderAddendum } from '../model/orderAddendum';
// @ts-ignore
import { OrderItem } from '../model/orderItem';
// @ts-ignore
import { OrderSequence } from '../model/orderSequence';
// @ts-ignore
import { PatchedSchedule } from '../model/patchedSchedule';
// @ts-ignore
import { Schedule } from '../model/schedule';
// @ts-ignore
import { ServiceCenter } from '../model/serviceCenter';
// @ts-ignore
import { Technician } from '../model/technician';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


export interface ServiceCenterFormattedRetrieveRequestParams {
    format: '.json';
    id: number;
}

export interface ServiceCenterRetrieveRequestParams {
    id: number;
}

export interface ServiceCentersFormattedListRequestParams {
    format: '.json';
    nameContains?: string;
    /** Multiple values may be separated by commas. */
    regionIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    regionManagersIdIn?: Array<number>;
}

export interface ServiceCentersListRequestParams {
    nameContains?: string;
    /** Multiple values may be separated by commas. */
    regionIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    regionManagersIdIn?: Array<number>;
}

export interface ServiceCommentFormattedRetrieveRequestParams {
    format: '.json';
    id: number;
}

export interface ServiceCommentRetrieveRequestParams {
    id: number;
}

export interface ServiceCommentsFormattedListRequestParams {
    format: '.json';
}

export interface ServiceJobsiteFormattedRetrieveRequestParams {
    format: '.json';
    id: number;
}

export interface ServiceJobsiteRetrieveRequestParams {
    id: number;
}

export interface ServiceJobsitesFormattedListRequestParams {
    format: '.json';
}

export interface ServiceManagersFormattedListRequestParams {
    format: '.json';
    firstNameContains?: string;
    lastNameContains?: string;
    /** Multiple values may be separated by commas. */
    regionIdIn?: Array<number>;
}

export interface ServiceManagersListRequestParams {
    firstNameContains?: string;
    lastNameContains?: string;
    /** Multiple values may be separated by commas. */
    regionIdIn?: Array<number>;
}

export interface ServiceOrderAddendumFormattedRetrieveRequestParams {
    format: '.json';
    id: number;
}

export interface ServiceOrderAddendumRetrieveRequestParams {
    id: number;
}

export interface ServiceOrderAddendumsFormattedListRequestParams {
    format: '.json';
    number?: number;
    /** Multiple values may be separated by commas. */
    sequenceJobSiteRegionCentersIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    sequenceJobSiteRegionCentersTechniciansIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    sequenceJobSiteRegionCitiesIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    sequenceJobSiteRegionIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    sequenceJobSiteRegionZipCodesCodeIn?: Array<string>;
    /** Multiple values may be separated by commas. */
    sequenceManagerIdIn?: Array<number>;
    sequenceNumber?: number;
    status?: '1' | '2' | '3' | '4' | '5';
    statusDate?: string;
}

export interface ServiceOrderAddendumsListRequestParams {
    number?: number;
    /** Multiple values may be separated by commas. */
    sequenceJobSiteRegionCentersIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    sequenceJobSiteRegionCentersTechniciansIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    sequenceJobSiteRegionCitiesIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    sequenceJobSiteRegionIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    sequenceJobSiteRegionZipCodesCodeIn?: Array<string>;
    /** Multiple values may be separated by commas. */
    sequenceManagerIdIn?: Array<number>;
    sequenceNumber?: number;
    status?: '1' | '2' | '3' | '4' | '5';
    statusDate?: string;
}

export interface ServiceOrderItemFormattedRetrieveRequestParams {
    format: '.json';
    id: number;
}

export interface ServiceOrderItemRetrieveRequestParams {
    id: number;
}

export interface ServiceOrderSequenceFormattedRetrieveRequestParams {
    format: '.json';
    id: number;
}

export interface ServiceOrderSequenceRetrieveRequestParams {
    id: number;
}

export interface ServiceOrdersSequencesFormattedListRequestParams {
    format: '.json';
    billingCust?: number;
    jobSite?: number;
    jobSiteRegionId?: number;
    number?: number;
    serviceCenter?: number;
}

export interface ServiceOrdersSequencesListRequestParams {
    billingCust?: number;
    jobSite?: number;
    jobSiteRegionId?: number;
    number?: number;
    serviceCenter?: number;
}

export interface ServiceScheduleDestroyRequestParams {
    id: number;
}

export interface ServiceScheduleFormattedDestroyRequestParams {
    format: '.json';
    id: number;
}

export interface ServiceScheduleFormattedPartialUpdateRequestParams {
    format: '.json';
    id: number;
    patchedSchedule?: PatchedSchedule;
}

export interface ServiceScheduleFormattedRetrieveRequestParams {
    format: '.json';
    id: number;
}

export interface ServiceScheduleFormattedUpdateRequestParams {
    format: '.json';
    id: number;
    schedule: Schedule;
}

export interface ServiceSchedulePartialUpdateRequestParams {
    id: number;
    patchedSchedule?: PatchedSchedule;
}

export interface ServiceScheduleRetrieveRequestParams {
    id: number;
}

export interface ServiceScheduleUpdateRequestParams {
    id: number;
    schedule: Schedule;
}

export interface ServiceSchedulesCreateRequestParams {
    schedule: Schedule;
}

export interface ServiceSchedulesFormattedCreateRequestParams {
    format: '.json';
    schedule: Schedule;
}

export interface ServiceSchedulesFormattedListRequestParams {
    format: '.json';
    addendumNumber?: number;
    addendumSequenceJobSiteCity?: string;
    addendumSequenceJobSiteCityContains?: string;
    addendumSequenceJobSiteRegionId?: number;
    addendumSequenceJobSiteZipCode?: string;
    addendumSequenceNumber?: number;
    endDateTimeAfter?: string;
    endDateTimeBefore?: string;
    /** Multiple values may be separated by commas. */
    serviceCenterIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    serviceCenterRegionCitiesIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    serviceCenterRegionIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    serviceCenterRegionManagersIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    serviceCenterRegionZipCodesCodeIn?: Array<string>;
    startDateTimeAfter?: string;
    startDateTimeBefore?: string;
    /** Multiple values may be separated by commas. */
    techniciansIdIn?: Array<number>;
}

export interface ServiceSchedulesListRequestParams {
    addendumNumber?: number;
    addendumSequenceJobSiteCity?: string;
    addendumSequenceJobSiteCityContains?: string;
    addendumSequenceJobSiteRegionId?: number;
    addendumSequenceJobSiteZipCode?: string;
    addendumSequenceNumber?: number;
    endDateTimeAfter?: string;
    endDateTimeBefore?: string;
    /** Multiple values may be separated by commas. */
    serviceCenterIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    serviceCenterRegionCitiesIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    serviceCenterRegionIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    serviceCenterRegionManagersIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    serviceCenterRegionZipCodesCodeIn?: Array<string>;
    startDateTimeAfter?: string;
    startDateTimeBefore?: string;
    /** Multiple values may be separated by commas. */
    techniciansIdIn?: Array<number>;
}

export interface ServiceTechFormattedRetrieveRequestParams {
    format: '.json';
    id: number;
}

export interface ServiceTechRetrieveRequestParams {
    id: number;
}

export interface ServiceTechsFormattedListRequestParams {
    format: '.json';
    /** Multiple values may be separated by commas. */
    centersIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    centersRegionCitiesIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    centersRegionIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    centersRegionManagersIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    centersRegionZipCodesCodeIn?: Array<string>;
    firstNameContains?: string;
    /** Multiple values may be separated by commas. */
    idIn?: Array<number>;
    lastNameContains?: string;
    qualifier?: string;
    type?: string;
    workWeek?: number;
}

export interface ServiceTechsListRequestParams {
    /** Multiple values may be separated by commas. */
    centersIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    centersRegionCitiesIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    centersRegionIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    centersRegionManagersIdIn?: Array<number>;
    /** Multiple values may be separated by commas. */
    centersRegionZipCodesCodeIn?: Array<string>;
    firstNameContains?: string;
    /** Multiple values may be separated by commas. */
    idIn?: Array<number>;
    lastNameContains?: string;
    qualifier?: string;
    type?: string;
    workWeek?: number;
}


@Injectable({
  providedIn: 'root'
})
export class ServiceService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceCenterFormattedRetrieve(requestParameters: ServiceCenterFormattedRetrieveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<ServiceCenter>;
    public serviceCenterFormattedRetrieve(requestParameters: ServiceCenterFormattedRetrieveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<ServiceCenter>>;
    public serviceCenterFormattedRetrieve(requestParameters: ServiceCenterFormattedRetrieveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<ServiceCenter>>;
    public serviceCenterFormattedRetrieve(requestParameters: ServiceCenterFormattedRetrieveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const format = requestParameters.format;
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling serviceCenterFormattedRetrieve.');
        }
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceCenterFormattedRetrieve.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/center/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}${this.configuration.encodeParam({name: "format", value: format, in: "path", style: "simple", explode: false, dataType: "'.json'", dataFormat: undefined})}`;
        return this.httpClient.request<ServiceCenter>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceCenterRetrieve(requestParameters: ServiceCenterRetrieveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<ServiceCenter>;
    public serviceCenterRetrieve(requestParameters: ServiceCenterRetrieveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<ServiceCenter>>;
    public serviceCenterRetrieve(requestParameters: ServiceCenterRetrieveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<ServiceCenter>>;
    public serviceCenterRetrieve(requestParameters: ServiceCenterRetrieveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceCenterRetrieve.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/center/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        return this.httpClient.request<ServiceCenter>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceCentersFormattedList(requestParameters: ServiceCentersFormattedListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ServiceCenter>>;
    public serviceCentersFormattedList(requestParameters: ServiceCentersFormattedListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ServiceCenter>>>;
    public serviceCentersFormattedList(requestParameters: ServiceCentersFormattedListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ServiceCenter>>>;
    public serviceCentersFormattedList(requestParameters: ServiceCentersFormattedListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const format = requestParameters.format;
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling serviceCentersFormattedList.');
        }
        const nameContains = requestParameters.nameContains;
        const regionIdIn = requestParameters.regionIdIn;
        const regionManagersIdIn = requestParameters.regionManagersIdIn;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (nameContains !== undefined && nameContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>nameContains, 'name__contains');
        }
        if (regionIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...regionIdIn].join(COLLECTION_FORMATS['csv']), 'region__id__in');
        }
        if (regionManagersIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...regionManagersIdIn].join(COLLECTION_FORMATS['csv']), 'region__managers__id__in');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/centers${this.configuration.encodeParam({name: "format", value: format, in: "path", style: "simple", explode: false, dataType: "'.json'", dataFormat: undefined})}`;
        return this.httpClient.request<Array<ServiceCenter>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceCentersList(requestParameters: ServiceCentersListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ServiceCenter>>;
    public serviceCentersList(requestParameters: ServiceCentersListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ServiceCenter>>>;
    public serviceCentersList(requestParameters: ServiceCentersListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ServiceCenter>>>;
    public serviceCentersList(requestParameters: ServiceCentersListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const nameContains = requestParameters.nameContains;
        const regionIdIn = requestParameters.regionIdIn;
        const regionManagersIdIn = requestParameters.regionManagersIdIn;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (nameContains !== undefined && nameContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>nameContains, 'name__contains');
        }
        if (regionIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...regionIdIn].join(COLLECTION_FORMATS['csv']), 'region__id__in');
        }
        if (regionManagersIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...regionManagersIdIn].join(COLLECTION_FORMATS['csv']), 'region__managers__id__in');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/centers`;
        return this.httpClient.request<Array<ServiceCenter>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceCommentFormattedRetrieve(requestParameters: ServiceCommentFormattedRetrieveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Comment>;
    public serviceCommentFormattedRetrieve(requestParameters: ServiceCommentFormattedRetrieveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Comment>>;
    public serviceCommentFormattedRetrieve(requestParameters: ServiceCommentFormattedRetrieveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Comment>>;
    public serviceCommentFormattedRetrieve(requestParameters: ServiceCommentFormattedRetrieveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const format = requestParameters.format;
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling serviceCommentFormattedRetrieve.');
        }
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceCommentFormattedRetrieve.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/comment/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}${this.configuration.encodeParam({name: "format", value: format, in: "path", style: "simple", explode: false, dataType: "'.json'", dataFormat: undefined})}`;
        return this.httpClient.request<Comment>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceCommentRetrieve(requestParameters: ServiceCommentRetrieveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Comment>;
    public serviceCommentRetrieve(requestParameters: ServiceCommentRetrieveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Comment>>;
    public serviceCommentRetrieve(requestParameters: ServiceCommentRetrieveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Comment>>;
    public serviceCommentRetrieve(requestParameters: ServiceCommentRetrieveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceCommentRetrieve.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/comment/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        return this.httpClient.request<Comment>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceCommentsFormattedList(requestParameters: ServiceCommentsFormattedListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<Comment>>;
    public serviceCommentsFormattedList(requestParameters: ServiceCommentsFormattedListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<Comment>>>;
    public serviceCommentsFormattedList(requestParameters: ServiceCommentsFormattedListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<Comment>>>;
    public serviceCommentsFormattedList(requestParameters: ServiceCommentsFormattedListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const format = requestParameters.format;
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling serviceCommentsFormattedList.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/comments${this.configuration.encodeParam({name: "format", value: format, in: "path", style: "simple", explode: false, dataType: "'.json'", dataFormat: undefined})}`;
        return this.httpClient.request<Array<Comment>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceCommentsList(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<Comment>>;
    public serviceCommentsList(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<Comment>>>;
    public serviceCommentsList(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<Comment>>>;
    public serviceCommentsList(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/comments`;
        return this.httpClient.request<Array<Comment>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceJobsiteFormattedRetrieve(requestParameters: ServiceJobsiteFormattedRetrieveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<JobSite>;
    public serviceJobsiteFormattedRetrieve(requestParameters: ServiceJobsiteFormattedRetrieveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<JobSite>>;
    public serviceJobsiteFormattedRetrieve(requestParameters: ServiceJobsiteFormattedRetrieveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<JobSite>>;
    public serviceJobsiteFormattedRetrieve(requestParameters: ServiceJobsiteFormattedRetrieveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const format = requestParameters.format;
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling serviceJobsiteFormattedRetrieve.');
        }
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceJobsiteFormattedRetrieve.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/jobsite/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}${this.configuration.encodeParam({name: "format", value: format, in: "path", style: "simple", explode: false, dataType: "'.json'", dataFormat: undefined})}`;
        return this.httpClient.request<JobSite>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceJobsiteRetrieve(requestParameters: ServiceJobsiteRetrieveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<JobSite>;
    public serviceJobsiteRetrieve(requestParameters: ServiceJobsiteRetrieveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<JobSite>>;
    public serviceJobsiteRetrieve(requestParameters: ServiceJobsiteRetrieveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<JobSite>>;
    public serviceJobsiteRetrieve(requestParameters: ServiceJobsiteRetrieveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceJobsiteRetrieve.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/jobsite/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        return this.httpClient.request<JobSite>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceJobsitesFormattedList(requestParameters: ServiceJobsitesFormattedListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<JobSite>>;
    public serviceJobsitesFormattedList(requestParameters: ServiceJobsitesFormattedListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<JobSite>>>;
    public serviceJobsitesFormattedList(requestParameters: ServiceJobsitesFormattedListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<JobSite>>>;
    public serviceJobsitesFormattedList(requestParameters: ServiceJobsitesFormattedListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const format = requestParameters.format;
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling serviceJobsitesFormattedList.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/jobsites${this.configuration.encodeParam({name: "format", value: format, in: "path", style: "simple", explode: false, dataType: "'.json'", dataFormat: undefined})}`;
        return this.httpClient.request<Array<JobSite>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceJobsitesList(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<JobSite>>;
    public serviceJobsitesList(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<JobSite>>>;
    public serviceJobsitesList(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<JobSite>>>;
    public serviceJobsitesList(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/jobsites`;
        return this.httpClient.request<Array<JobSite>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceManagersFormattedList(requestParameters: ServiceManagersFormattedListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<Manager>>;
    public serviceManagersFormattedList(requestParameters: ServiceManagersFormattedListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<Manager>>>;
    public serviceManagersFormattedList(requestParameters: ServiceManagersFormattedListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<Manager>>>;
    public serviceManagersFormattedList(requestParameters: ServiceManagersFormattedListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const format = requestParameters.format;
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling serviceManagersFormattedList.');
        }
        const firstNameContains = requestParameters.firstNameContains;
        const lastNameContains = requestParameters.lastNameContains;
        const regionIdIn = requestParameters.regionIdIn;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (firstNameContains !== undefined && firstNameContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>firstNameContains, 'firstName__contains');
        }
        if (lastNameContains !== undefined && lastNameContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lastNameContains, 'lastName__contains');
        }
        if (regionIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...regionIdIn].join(COLLECTION_FORMATS['csv']), 'region__id__in');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/managers${this.configuration.encodeParam({name: "format", value: format, in: "path", style: "simple", explode: false, dataType: "'.json'", dataFormat: undefined})}`;
        return this.httpClient.request<Array<Manager>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceManagersList(requestParameters: ServiceManagersListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<Manager>>;
    public serviceManagersList(requestParameters: ServiceManagersListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<Manager>>>;
    public serviceManagersList(requestParameters: ServiceManagersListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<Manager>>>;
    public serviceManagersList(requestParameters: ServiceManagersListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const firstNameContains = requestParameters.firstNameContains;
        const lastNameContains = requestParameters.lastNameContains;
        const regionIdIn = requestParameters.regionIdIn;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (firstNameContains !== undefined && firstNameContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>firstNameContains, 'firstName__contains');
        }
        if (lastNameContains !== undefined && lastNameContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lastNameContains, 'lastName__contains');
        }
        if (regionIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...regionIdIn].join(COLLECTION_FORMATS['csv']), 'region__id__in');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/managers`;
        return this.httpClient.request<Array<Manager>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceOrderAddendumFormattedRetrieve(requestParameters: ServiceOrderAddendumFormattedRetrieveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<OrderAddendum>;
    public serviceOrderAddendumFormattedRetrieve(requestParameters: ServiceOrderAddendumFormattedRetrieveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<OrderAddendum>>;
    public serviceOrderAddendumFormattedRetrieve(requestParameters: ServiceOrderAddendumFormattedRetrieveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<OrderAddendum>>;
    public serviceOrderAddendumFormattedRetrieve(requestParameters: ServiceOrderAddendumFormattedRetrieveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const format = requestParameters.format;
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling serviceOrderAddendumFormattedRetrieve.');
        }
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceOrderAddendumFormattedRetrieve.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/order/addendum/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}${this.configuration.encodeParam({name: "format", value: format, in: "path", style: "simple", explode: false, dataType: "'.json'", dataFormat: undefined})}`;
        return this.httpClient.request<OrderAddendum>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceOrderAddendumRetrieve(requestParameters: ServiceOrderAddendumRetrieveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<OrderAddendum>;
    public serviceOrderAddendumRetrieve(requestParameters: ServiceOrderAddendumRetrieveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<OrderAddendum>>;
    public serviceOrderAddendumRetrieve(requestParameters: ServiceOrderAddendumRetrieveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<OrderAddendum>>;
    public serviceOrderAddendumRetrieve(requestParameters: ServiceOrderAddendumRetrieveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceOrderAddendumRetrieve.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/order/addendum/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        return this.httpClient.request<OrderAddendum>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceOrderAddendumsFormattedList(requestParameters: ServiceOrderAddendumsFormattedListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<OrderAddendum>>;
    public serviceOrderAddendumsFormattedList(requestParameters: ServiceOrderAddendumsFormattedListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<OrderAddendum>>>;
    public serviceOrderAddendumsFormattedList(requestParameters: ServiceOrderAddendumsFormattedListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<OrderAddendum>>>;
    public serviceOrderAddendumsFormattedList(requestParameters: ServiceOrderAddendumsFormattedListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const format = requestParameters.format;
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling serviceOrderAddendumsFormattedList.');
        }
        const number = requestParameters.number;
        const sequenceJobSiteRegionCentersIdIn = requestParameters.sequenceJobSiteRegionCentersIdIn;
        const sequenceJobSiteRegionCentersTechniciansIdIn = requestParameters.sequenceJobSiteRegionCentersTechniciansIdIn;
        const sequenceJobSiteRegionCitiesIdIn = requestParameters.sequenceJobSiteRegionCitiesIdIn;
        const sequenceJobSiteRegionIdIn = requestParameters.sequenceJobSiteRegionIdIn;
        const sequenceJobSiteRegionZipCodesCodeIn = requestParameters.sequenceJobSiteRegionZipCodesCodeIn;
        const sequenceManagerIdIn = requestParameters.sequenceManagerIdIn;
        const sequenceNumber = requestParameters.sequenceNumber;
        const status = requestParameters.status;
        const statusDate = requestParameters.statusDate;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (number !== undefined && number !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>number, 'number');
        }
        if (sequenceJobSiteRegionCentersIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...sequenceJobSiteRegionCentersIdIn].join(COLLECTION_FORMATS['csv']), 'sequence__jobSite__region__centers__id__in');
        }
        if (sequenceJobSiteRegionCentersTechniciansIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...sequenceJobSiteRegionCentersTechniciansIdIn].join(COLLECTION_FORMATS['csv']), 'sequence__jobSite__region__centers__technicians__id__in');
        }
        if (sequenceJobSiteRegionCitiesIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...sequenceJobSiteRegionCitiesIdIn].join(COLLECTION_FORMATS['csv']), 'sequence__jobSite__region__cities__id__in');
        }
        if (sequenceJobSiteRegionIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...sequenceJobSiteRegionIdIn].join(COLLECTION_FORMATS['csv']), 'sequence__jobSite__region__id__in');
        }
        if (sequenceJobSiteRegionZipCodesCodeIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...sequenceJobSiteRegionZipCodesCodeIn].join(COLLECTION_FORMATS['csv']), 'sequence__jobSite__region__zipCodes__code__in');
        }
        if (sequenceManagerIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...sequenceManagerIdIn].join(COLLECTION_FORMATS['csv']), 'sequence__manager__id__in');
        }
        if (sequenceNumber !== undefined && sequenceNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sequenceNumber, 'sequence__number');
        }
        if (status !== undefined && status !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>status, 'status');
        }
        if (statusDate !== undefined && statusDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>statusDate, 'statusDate');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/order/addendums${this.configuration.encodeParam({name: "format", value: format, in: "path", style: "simple", explode: false, dataType: "'.json'", dataFormat: undefined})}`;
        return this.httpClient.request<Array<OrderAddendum>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceOrderAddendumsList(requestParameters: ServiceOrderAddendumsListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<OrderAddendum>>;
    public serviceOrderAddendumsList(requestParameters: ServiceOrderAddendumsListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<OrderAddendum>>>;
    public serviceOrderAddendumsList(requestParameters: ServiceOrderAddendumsListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<OrderAddendum>>>;
    public serviceOrderAddendumsList(requestParameters: ServiceOrderAddendumsListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const number = requestParameters.number;
        const sequenceJobSiteRegionCentersIdIn = requestParameters.sequenceJobSiteRegionCentersIdIn;
        const sequenceJobSiteRegionCentersTechniciansIdIn = requestParameters.sequenceJobSiteRegionCentersTechniciansIdIn;
        const sequenceJobSiteRegionCitiesIdIn = requestParameters.sequenceJobSiteRegionCitiesIdIn;
        const sequenceJobSiteRegionIdIn = requestParameters.sequenceJobSiteRegionIdIn;
        const sequenceJobSiteRegionZipCodesCodeIn = requestParameters.sequenceJobSiteRegionZipCodesCodeIn;
        const sequenceManagerIdIn = requestParameters.sequenceManagerIdIn;
        const sequenceNumber = requestParameters.sequenceNumber;
        const status = requestParameters.status;
        const statusDate = requestParameters.statusDate;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (number !== undefined && number !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>number, 'number');
        }
        if (sequenceJobSiteRegionCentersIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...sequenceJobSiteRegionCentersIdIn].join(COLLECTION_FORMATS['csv']), 'sequence__jobSite__region__centers__id__in');
        }
        if (sequenceJobSiteRegionCentersTechniciansIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...sequenceJobSiteRegionCentersTechniciansIdIn].join(COLLECTION_FORMATS['csv']), 'sequence__jobSite__region__centers__technicians__id__in');
        }
        if (sequenceJobSiteRegionCitiesIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...sequenceJobSiteRegionCitiesIdIn].join(COLLECTION_FORMATS['csv']), 'sequence__jobSite__region__cities__id__in');
        }
        if (sequenceJobSiteRegionIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...sequenceJobSiteRegionIdIn].join(COLLECTION_FORMATS['csv']), 'sequence__jobSite__region__id__in');
        }
        if (sequenceJobSiteRegionZipCodesCodeIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...sequenceJobSiteRegionZipCodesCodeIn].join(COLLECTION_FORMATS['csv']), 'sequence__jobSite__region__zipCodes__code__in');
        }
        if (sequenceManagerIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...sequenceManagerIdIn].join(COLLECTION_FORMATS['csv']), 'sequence__manager__id__in');
        }
        if (sequenceNumber !== undefined && sequenceNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sequenceNumber, 'sequence__number');
        }
        if (status !== undefined && status !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>status, 'status');
        }
        if (statusDate !== undefined && statusDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>statusDate, 'statusDate');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/order/addendums`;
        return this.httpClient.request<Array<OrderAddendum>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceOrderItemFormattedRetrieve(requestParameters: ServiceOrderItemFormattedRetrieveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<OrderItem>;
    public serviceOrderItemFormattedRetrieve(requestParameters: ServiceOrderItemFormattedRetrieveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<OrderItem>>;
    public serviceOrderItemFormattedRetrieve(requestParameters: ServiceOrderItemFormattedRetrieveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<OrderItem>>;
    public serviceOrderItemFormattedRetrieve(requestParameters: ServiceOrderItemFormattedRetrieveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const format = requestParameters.format;
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling serviceOrderItemFormattedRetrieve.');
        }
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceOrderItemFormattedRetrieve.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/order/item/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}${this.configuration.encodeParam({name: "format", value: format, in: "path", style: "simple", explode: false, dataType: "'.json'", dataFormat: undefined})}`;
        return this.httpClient.request<OrderItem>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceOrderItemRetrieve(requestParameters: ServiceOrderItemRetrieveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<OrderItem>;
    public serviceOrderItemRetrieve(requestParameters: ServiceOrderItemRetrieveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<OrderItem>>;
    public serviceOrderItemRetrieve(requestParameters: ServiceOrderItemRetrieveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<OrderItem>>;
    public serviceOrderItemRetrieve(requestParameters: ServiceOrderItemRetrieveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceOrderItemRetrieve.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/order/item/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        return this.httpClient.request<OrderItem>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceOrderSequenceFormattedRetrieve(requestParameters: ServiceOrderSequenceFormattedRetrieveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<OrderSequence>;
    public serviceOrderSequenceFormattedRetrieve(requestParameters: ServiceOrderSequenceFormattedRetrieveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<OrderSequence>>;
    public serviceOrderSequenceFormattedRetrieve(requestParameters: ServiceOrderSequenceFormattedRetrieveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<OrderSequence>>;
    public serviceOrderSequenceFormattedRetrieve(requestParameters: ServiceOrderSequenceFormattedRetrieveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const format = requestParameters.format;
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling serviceOrderSequenceFormattedRetrieve.');
        }
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceOrderSequenceFormattedRetrieve.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/order/sequence/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}${this.configuration.encodeParam({name: "format", value: format, in: "path", style: "simple", explode: false, dataType: "'.json'", dataFormat: undefined})}`;
        return this.httpClient.request<OrderSequence>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceOrderSequenceRetrieve(requestParameters: ServiceOrderSequenceRetrieveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<OrderSequence>;
    public serviceOrderSequenceRetrieve(requestParameters: ServiceOrderSequenceRetrieveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<OrderSequence>>;
    public serviceOrderSequenceRetrieve(requestParameters: ServiceOrderSequenceRetrieveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<OrderSequence>>;
    public serviceOrderSequenceRetrieve(requestParameters: ServiceOrderSequenceRetrieveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceOrderSequenceRetrieve.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/order/sequence/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        return this.httpClient.request<OrderSequence>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceOrdersSequencesFormattedList(requestParameters: ServiceOrdersSequencesFormattedListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<OrderSequence>>;
    public serviceOrdersSequencesFormattedList(requestParameters: ServiceOrdersSequencesFormattedListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<OrderSequence>>>;
    public serviceOrdersSequencesFormattedList(requestParameters: ServiceOrdersSequencesFormattedListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<OrderSequence>>>;
    public serviceOrdersSequencesFormattedList(requestParameters: ServiceOrdersSequencesFormattedListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const format = requestParameters.format;
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling serviceOrdersSequencesFormattedList.');
        }
        const billingCust = requestParameters.billingCust;
        const jobSite = requestParameters.jobSite;
        const jobSiteRegionId = requestParameters.jobSiteRegionId;
        const number = requestParameters.number;
        const serviceCenter = requestParameters.serviceCenter;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (billingCust !== undefined && billingCust !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>billingCust, 'billingCust');
        }
        if (jobSite !== undefined && jobSite !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>jobSite, 'jobSite');
        }
        if (jobSiteRegionId !== undefined && jobSiteRegionId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>jobSiteRegionId, 'jobSite__region__id');
        }
        if (number !== undefined && number !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>number, 'number');
        }
        if (serviceCenter !== undefined && serviceCenter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>serviceCenter, 'serviceCenter');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/orders/sequences${this.configuration.encodeParam({name: "format", value: format, in: "path", style: "simple", explode: false, dataType: "'.json'", dataFormat: undefined})}`;
        return this.httpClient.request<Array<OrderSequence>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceOrdersSequencesList(requestParameters: ServiceOrdersSequencesListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<OrderSequence>>;
    public serviceOrdersSequencesList(requestParameters: ServiceOrdersSequencesListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<OrderSequence>>>;
    public serviceOrdersSequencesList(requestParameters: ServiceOrdersSequencesListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<OrderSequence>>>;
    public serviceOrdersSequencesList(requestParameters: ServiceOrdersSequencesListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const billingCust = requestParameters.billingCust;
        const jobSite = requestParameters.jobSite;
        const jobSiteRegionId = requestParameters.jobSiteRegionId;
        const number = requestParameters.number;
        const serviceCenter = requestParameters.serviceCenter;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (billingCust !== undefined && billingCust !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>billingCust, 'billingCust');
        }
        if (jobSite !== undefined && jobSite !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>jobSite, 'jobSite');
        }
        if (jobSiteRegionId !== undefined && jobSiteRegionId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>jobSiteRegionId, 'jobSite__region__id');
        }
        if (number !== undefined && number !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>number, 'number');
        }
        if (serviceCenter !== undefined && serviceCenter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>serviceCenter, 'serviceCenter');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/orders/sequences`;
        return this.httpClient.request<Array<OrderSequence>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceScheduleDestroy(requestParameters: ServiceScheduleDestroyRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public serviceScheduleDestroy(requestParameters: ServiceScheduleDestroyRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public serviceScheduleDestroy(requestParameters: ServiceScheduleDestroyRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public serviceScheduleDestroy(requestParameters: ServiceScheduleDestroyRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceScheduleDestroy.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/schedule/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceScheduleFormattedDestroy(requestParameters: ServiceScheduleFormattedDestroyRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public serviceScheduleFormattedDestroy(requestParameters: ServiceScheduleFormattedDestroyRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public serviceScheduleFormattedDestroy(requestParameters: ServiceScheduleFormattedDestroyRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public serviceScheduleFormattedDestroy(requestParameters: ServiceScheduleFormattedDestroyRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        const format = requestParameters.format;
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling serviceScheduleFormattedDestroy.');
        }
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceScheduleFormattedDestroy.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/schedule/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}${this.configuration.encodeParam({name: "format", value: format, in: "path", style: "simple", explode: false, dataType: "'.json'", dataFormat: undefined})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceScheduleFormattedPartialUpdate(requestParameters: ServiceScheduleFormattedPartialUpdateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Schedule>;
    public serviceScheduleFormattedPartialUpdate(requestParameters: ServiceScheduleFormattedPartialUpdateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Schedule>>;
    public serviceScheduleFormattedPartialUpdate(requestParameters: ServiceScheduleFormattedPartialUpdateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Schedule>>;
    public serviceScheduleFormattedPartialUpdate(requestParameters: ServiceScheduleFormattedPartialUpdateRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const format = requestParameters.format;
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling serviceScheduleFormattedPartialUpdate.');
        }
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceScheduleFormattedPartialUpdate.');
        }
        const patchedSchedule = requestParameters.patchedSchedule;

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/schedule/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}${this.configuration.encodeParam({name: "format", value: format, in: "path", style: "simple", explode: false, dataType: "'.json'", dataFormat: undefined})}`;
        return this.httpClient.request<Schedule>('patch', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: patchedSchedule,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceScheduleFormattedRetrieve(requestParameters: ServiceScheduleFormattedRetrieveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Schedule>;
    public serviceScheduleFormattedRetrieve(requestParameters: ServiceScheduleFormattedRetrieveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Schedule>>;
    public serviceScheduleFormattedRetrieve(requestParameters: ServiceScheduleFormattedRetrieveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Schedule>>;
    public serviceScheduleFormattedRetrieve(requestParameters: ServiceScheduleFormattedRetrieveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const format = requestParameters.format;
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling serviceScheduleFormattedRetrieve.');
        }
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceScheduleFormattedRetrieve.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/schedule/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}${this.configuration.encodeParam({name: "format", value: format, in: "path", style: "simple", explode: false, dataType: "'.json'", dataFormat: undefined})}`;
        return this.httpClient.request<Schedule>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceScheduleFormattedUpdate(requestParameters: ServiceScheduleFormattedUpdateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Schedule>;
    public serviceScheduleFormattedUpdate(requestParameters: ServiceScheduleFormattedUpdateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Schedule>>;
    public serviceScheduleFormattedUpdate(requestParameters: ServiceScheduleFormattedUpdateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Schedule>>;
    public serviceScheduleFormattedUpdate(requestParameters: ServiceScheduleFormattedUpdateRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const format = requestParameters.format;
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling serviceScheduleFormattedUpdate.');
        }
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceScheduleFormattedUpdate.');
        }
        const schedule = requestParameters.schedule;
        if (schedule === null || schedule === undefined) {
            throw new Error('Required parameter schedule was null or undefined when calling serviceScheduleFormattedUpdate.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/schedule/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}${this.configuration.encodeParam({name: "format", value: format, in: "path", style: "simple", explode: false, dataType: "'.json'", dataFormat: undefined})}`;
        return this.httpClient.request<Schedule>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: schedule,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceSchedulePartialUpdate(requestParameters: ServiceSchedulePartialUpdateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Schedule>;
    public serviceSchedulePartialUpdate(requestParameters: ServiceSchedulePartialUpdateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Schedule>>;
    public serviceSchedulePartialUpdate(requestParameters: ServiceSchedulePartialUpdateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Schedule>>;
    public serviceSchedulePartialUpdate(requestParameters: ServiceSchedulePartialUpdateRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceSchedulePartialUpdate.');
        }
        const patchedSchedule = requestParameters.patchedSchedule;

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/schedule/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        return this.httpClient.request<Schedule>('patch', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: patchedSchedule,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceScheduleRetrieve(requestParameters: ServiceScheduleRetrieveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Schedule>;
    public serviceScheduleRetrieve(requestParameters: ServiceScheduleRetrieveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Schedule>>;
    public serviceScheduleRetrieve(requestParameters: ServiceScheduleRetrieveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Schedule>>;
    public serviceScheduleRetrieve(requestParameters: ServiceScheduleRetrieveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceScheduleRetrieve.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/schedule/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        return this.httpClient.request<Schedule>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceScheduleUpdate(requestParameters: ServiceScheduleUpdateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Schedule>;
    public serviceScheduleUpdate(requestParameters: ServiceScheduleUpdateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Schedule>>;
    public serviceScheduleUpdate(requestParameters: ServiceScheduleUpdateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Schedule>>;
    public serviceScheduleUpdate(requestParameters: ServiceScheduleUpdateRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceScheduleUpdate.');
        }
        const schedule = requestParameters.schedule;
        if (schedule === null || schedule === undefined) {
            throw new Error('Required parameter schedule was null or undefined when calling serviceScheduleUpdate.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/schedule/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        return this.httpClient.request<Schedule>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: schedule,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceSchedulesCreate(requestParameters: ServiceSchedulesCreateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Schedule>;
    public serviceSchedulesCreate(requestParameters: ServiceSchedulesCreateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Schedule>>;
    public serviceSchedulesCreate(requestParameters: ServiceSchedulesCreateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Schedule>>;
    public serviceSchedulesCreate(requestParameters: ServiceSchedulesCreateRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const schedule = requestParameters.schedule;
        if (schedule === null || schedule === undefined) {
            throw new Error('Required parameter schedule was null or undefined when calling serviceSchedulesCreate.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/schedules`;
        return this.httpClient.request<Schedule>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: schedule,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceSchedulesFormattedCreate(requestParameters: ServiceSchedulesFormattedCreateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Schedule>;
    public serviceSchedulesFormattedCreate(requestParameters: ServiceSchedulesFormattedCreateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Schedule>>;
    public serviceSchedulesFormattedCreate(requestParameters: ServiceSchedulesFormattedCreateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Schedule>>;
    public serviceSchedulesFormattedCreate(requestParameters: ServiceSchedulesFormattedCreateRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const format = requestParameters.format;
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling serviceSchedulesFormattedCreate.');
        }
        const schedule = requestParameters.schedule;
        if (schedule === null || schedule === undefined) {
            throw new Error('Required parameter schedule was null or undefined when calling serviceSchedulesFormattedCreate.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/schedules${this.configuration.encodeParam({name: "format", value: format, in: "path", style: "simple", explode: false, dataType: "'.json'", dataFormat: undefined})}`;
        return this.httpClient.request<Schedule>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: schedule,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceSchedulesFormattedList(requestParameters: ServiceSchedulesFormattedListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<Schedule>>;
    public serviceSchedulesFormattedList(requestParameters: ServiceSchedulesFormattedListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<Schedule>>>;
    public serviceSchedulesFormattedList(requestParameters: ServiceSchedulesFormattedListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<Schedule>>>;
    public serviceSchedulesFormattedList(requestParameters: ServiceSchedulesFormattedListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const format = requestParameters.format;
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling serviceSchedulesFormattedList.');
        }
        const addendumNumber = requestParameters.addendumNumber;
        const addendumSequenceJobSiteCity = requestParameters.addendumSequenceJobSiteCity;
        const addendumSequenceJobSiteCityContains = requestParameters.addendumSequenceJobSiteCityContains;
        const addendumSequenceJobSiteRegionId = requestParameters.addendumSequenceJobSiteRegionId;
        const addendumSequenceJobSiteZipCode = requestParameters.addendumSequenceJobSiteZipCode;
        const addendumSequenceNumber = requestParameters.addendumSequenceNumber;
        const endDateTimeAfter = requestParameters.endDateTimeAfter;
        const endDateTimeBefore = requestParameters.endDateTimeBefore;
        const serviceCenterIdIn = requestParameters.serviceCenterIdIn;
        const serviceCenterRegionCitiesIdIn = requestParameters.serviceCenterRegionCitiesIdIn;
        const serviceCenterRegionIdIn = requestParameters.serviceCenterRegionIdIn;
        const serviceCenterRegionManagersIdIn = requestParameters.serviceCenterRegionManagersIdIn;
        const serviceCenterRegionZipCodesCodeIn = requestParameters.serviceCenterRegionZipCodesCodeIn;
        const startDateTimeAfter = requestParameters.startDateTimeAfter;
        const startDateTimeBefore = requestParameters.startDateTimeBefore;
        const techniciansIdIn = requestParameters.techniciansIdIn;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (addendumNumber !== undefined && addendumNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addendumNumber, 'addendum__number');
        }
        if (addendumSequenceJobSiteCity !== undefined && addendumSequenceJobSiteCity !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addendumSequenceJobSiteCity, 'addendum__sequence__jobSite__city');
        }
        if (addendumSequenceJobSiteCityContains !== undefined && addendumSequenceJobSiteCityContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addendumSequenceJobSiteCityContains, 'addendum__sequence__jobSite__city__contains');
        }
        if (addendumSequenceJobSiteRegionId !== undefined && addendumSequenceJobSiteRegionId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addendumSequenceJobSiteRegionId, 'addendum__sequence__jobSite__region__id');
        }
        if (addendumSequenceJobSiteZipCode !== undefined && addendumSequenceJobSiteZipCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addendumSequenceJobSiteZipCode, 'addendum__sequence__jobSite__zipCode');
        }
        if (addendumSequenceNumber !== undefined && addendumSequenceNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addendumSequenceNumber, 'addendum__sequence__number');
        }
        if (endDateTimeAfter !== undefined && endDateTimeAfter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDateTimeAfter, 'endDateTime_after');
        }
        if (endDateTimeBefore !== undefined && endDateTimeBefore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDateTimeBefore, 'endDateTime_before');
        }
        if (serviceCenterIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...serviceCenterIdIn].join(COLLECTION_FORMATS['csv']), 'serviceCenter__id__in');
        }
        if (serviceCenterRegionCitiesIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...serviceCenterRegionCitiesIdIn].join(COLLECTION_FORMATS['csv']), 'serviceCenter__region__cities__id__in');
        }
        if (serviceCenterRegionIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...serviceCenterRegionIdIn].join(COLLECTION_FORMATS['csv']), 'serviceCenter__region__id__in');
        }
        if (serviceCenterRegionManagersIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...serviceCenterRegionManagersIdIn].join(COLLECTION_FORMATS['csv']), 'serviceCenter__region__managers__id__in');
        }
        if (serviceCenterRegionZipCodesCodeIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...serviceCenterRegionZipCodesCodeIn].join(COLLECTION_FORMATS['csv']), 'serviceCenter__region__zipCodes__code__in');
        }
        if (startDateTimeAfter !== undefined && startDateTimeAfter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDateTimeAfter, 'startDateTime_after');
        }
        if (startDateTimeBefore !== undefined && startDateTimeBefore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDateTimeBefore, 'startDateTime_before');
        }
        if (techniciansIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...techniciansIdIn].join(COLLECTION_FORMATS['csv']), 'technicians__id__in');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/schedules${this.configuration.encodeParam({name: "format", value: format, in: "path", style: "simple", explode: false, dataType: "'.json'", dataFormat: undefined})}`;
        return this.httpClient.request<Array<Schedule>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceSchedulesList(requestParameters: ServiceSchedulesListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<Schedule>>;
    public serviceSchedulesList(requestParameters: ServiceSchedulesListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<Schedule>>>;
    public serviceSchedulesList(requestParameters: ServiceSchedulesListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<Schedule>>>;
    public serviceSchedulesList(requestParameters: ServiceSchedulesListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const addendumNumber = requestParameters.addendumNumber;
        const addendumSequenceJobSiteCity = requestParameters.addendumSequenceJobSiteCity;
        const addendumSequenceJobSiteCityContains = requestParameters.addendumSequenceJobSiteCityContains;
        const addendumSequenceJobSiteRegionId = requestParameters.addendumSequenceJobSiteRegionId;
        const addendumSequenceJobSiteZipCode = requestParameters.addendumSequenceJobSiteZipCode;
        const addendumSequenceNumber = requestParameters.addendumSequenceNumber;
        const endDateTimeAfter = requestParameters.endDateTimeAfter;
        const endDateTimeBefore = requestParameters.endDateTimeBefore;
        const serviceCenterIdIn = requestParameters.serviceCenterIdIn;
        const serviceCenterRegionCitiesIdIn = requestParameters.serviceCenterRegionCitiesIdIn;
        const serviceCenterRegionIdIn = requestParameters.serviceCenterRegionIdIn;
        const serviceCenterRegionManagersIdIn = requestParameters.serviceCenterRegionManagersIdIn;
        const serviceCenterRegionZipCodesCodeIn = requestParameters.serviceCenterRegionZipCodesCodeIn;
        const startDateTimeAfter = requestParameters.startDateTimeAfter;
        const startDateTimeBefore = requestParameters.startDateTimeBefore;
        const techniciansIdIn = requestParameters.techniciansIdIn;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (addendumNumber !== undefined && addendumNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addendumNumber, 'addendum__number');
        }
        if (addendumSequenceJobSiteCity !== undefined && addendumSequenceJobSiteCity !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addendumSequenceJobSiteCity, 'addendum__sequence__jobSite__city');
        }
        if (addendumSequenceJobSiteCityContains !== undefined && addendumSequenceJobSiteCityContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addendumSequenceJobSiteCityContains, 'addendum__sequence__jobSite__city__contains');
        }
        if (addendumSequenceJobSiteRegionId !== undefined && addendumSequenceJobSiteRegionId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addendumSequenceJobSiteRegionId, 'addendum__sequence__jobSite__region__id');
        }
        if (addendumSequenceJobSiteZipCode !== undefined && addendumSequenceJobSiteZipCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addendumSequenceJobSiteZipCode, 'addendum__sequence__jobSite__zipCode');
        }
        if (addendumSequenceNumber !== undefined && addendumSequenceNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addendumSequenceNumber, 'addendum__sequence__number');
        }
        if (endDateTimeAfter !== undefined && endDateTimeAfter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDateTimeAfter, 'endDateTime_after');
        }
        if (endDateTimeBefore !== undefined && endDateTimeBefore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDateTimeBefore, 'endDateTime_before');
        }
        if (serviceCenterIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...serviceCenterIdIn].join(COLLECTION_FORMATS['csv']), 'serviceCenter__id__in');
        }
        if (serviceCenterRegionCitiesIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...serviceCenterRegionCitiesIdIn].join(COLLECTION_FORMATS['csv']), 'serviceCenter__region__cities__id__in');
        }
        if (serviceCenterRegionIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...serviceCenterRegionIdIn].join(COLLECTION_FORMATS['csv']), 'serviceCenter__region__id__in');
        }
        if (serviceCenterRegionManagersIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...serviceCenterRegionManagersIdIn].join(COLLECTION_FORMATS['csv']), 'serviceCenter__region__managers__id__in');
        }
        if (serviceCenterRegionZipCodesCodeIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...serviceCenterRegionZipCodesCodeIn].join(COLLECTION_FORMATS['csv']), 'serviceCenter__region__zipCodes__code__in');
        }
        if (startDateTimeAfter !== undefined && startDateTimeAfter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDateTimeAfter, 'startDateTime_after');
        }
        if (startDateTimeBefore !== undefined && startDateTimeBefore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDateTimeBefore, 'startDateTime_before');
        }
        if (techniciansIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...techniciansIdIn].join(COLLECTION_FORMATS['csv']), 'technicians__id__in');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/schedules`;
        return this.httpClient.request<Array<Schedule>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceTechFormattedRetrieve(requestParameters: ServiceTechFormattedRetrieveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Technician>;
    public serviceTechFormattedRetrieve(requestParameters: ServiceTechFormattedRetrieveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Technician>>;
    public serviceTechFormattedRetrieve(requestParameters: ServiceTechFormattedRetrieveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Technician>>;
    public serviceTechFormattedRetrieve(requestParameters: ServiceTechFormattedRetrieveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const format = requestParameters.format;
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling serviceTechFormattedRetrieve.');
        }
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceTechFormattedRetrieve.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/tech/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}${this.configuration.encodeParam({name: "format", value: format, in: "path", style: "simple", explode: false, dataType: "'.json'", dataFormat: undefined})}`;
        return this.httpClient.request<Technician>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceTechRetrieve(requestParameters: ServiceTechRetrieveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Technician>;
    public serviceTechRetrieve(requestParameters: ServiceTechRetrieveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Technician>>;
    public serviceTechRetrieve(requestParameters: ServiceTechRetrieveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Technician>>;
    public serviceTechRetrieve(requestParameters: ServiceTechRetrieveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const id = requestParameters.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceTechRetrieve.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/tech/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        return this.httpClient.request<Technician>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceTechsFormattedList(requestParameters: ServiceTechsFormattedListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<Technician>>;
    public serviceTechsFormattedList(requestParameters: ServiceTechsFormattedListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<Technician>>>;
    public serviceTechsFormattedList(requestParameters: ServiceTechsFormattedListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<Technician>>>;
    public serviceTechsFormattedList(requestParameters: ServiceTechsFormattedListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const format = requestParameters.format;
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling serviceTechsFormattedList.');
        }
        const centersIdIn = requestParameters.centersIdIn;
        const centersRegionCitiesIdIn = requestParameters.centersRegionCitiesIdIn;
        const centersRegionIdIn = requestParameters.centersRegionIdIn;
        const centersRegionManagersIdIn = requestParameters.centersRegionManagersIdIn;
        const centersRegionZipCodesCodeIn = requestParameters.centersRegionZipCodesCodeIn;
        const firstNameContains = requestParameters.firstNameContains;
        const idIn = requestParameters.idIn;
        const lastNameContains = requestParameters.lastNameContains;
        const qualifier = requestParameters.qualifier;
        const type = requestParameters.type;
        const workWeek = requestParameters.workWeek;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (centersIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...centersIdIn].join(COLLECTION_FORMATS['csv']), 'centers__id__in');
        }
        if (centersRegionCitiesIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...centersRegionCitiesIdIn].join(COLLECTION_FORMATS['csv']), 'centers__region__cities__id__in');
        }
        if (centersRegionIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...centersRegionIdIn].join(COLLECTION_FORMATS['csv']), 'centers__region__id__in');
        }
        if (centersRegionManagersIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...centersRegionManagersIdIn].join(COLLECTION_FORMATS['csv']), 'centers__region__managers__id__in');
        }
        if (centersRegionZipCodesCodeIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...centersRegionZipCodesCodeIn].join(COLLECTION_FORMATS['csv']), 'centers__region__zipCodes__code__in');
        }
        if (firstNameContains !== undefined && firstNameContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>firstNameContains, 'firstName__contains');
        }
        if (idIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...idIn].join(COLLECTION_FORMATS['csv']), 'id__in');
        }
        if (lastNameContains !== undefined && lastNameContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lastNameContains, 'lastName__contains');
        }
        if (qualifier !== undefined && qualifier !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>qualifier, 'qualifier');
        }
        if (type !== undefined && type !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>type, 'type');
        }
        if (workWeek !== undefined && workWeek !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>workWeek, 'workWeek');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/techs${this.configuration.encodeParam({name: "format", value: format, in: "path", style: "simple", explode: false, dataType: "'.json'", dataFormat: undefined})}`;
        return this.httpClient.request<Array<Technician>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceTechsList(requestParameters: ServiceTechsListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<Technician>>;
    public serviceTechsList(requestParameters: ServiceTechsListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<Technician>>>;
    public serviceTechsList(requestParameters: ServiceTechsListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<Technician>>>;
    public serviceTechsList(requestParameters: ServiceTechsListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        const centersIdIn = requestParameters.centersIdIn;
        const centersRegionCitiesIdIn = requestParameters.centersRegionCitiesIdIn;
        const centersRegionIdIn = requestParameters.centersRegionIdIn;
        const centersRegionManagersIdIn = requestParameters.centersRegionManagersIdIn;
        const centersRegionZipCodesCodeIn = requestParameters.centersRegionZipCodesCodeIn;
        const firstNameContains = requestParameters.firstNameContains;
        const idIn = requestParameters.idIn;
        const lastNameContains = requestParameters.lastNameContains;
        const qualifier = requestParameters.qualifier;
        const type = requestParameters.type;
        const workWeek = requestParameters.workWeek;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (centersIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...centersIdIn].join(COLLECTION_FORMATS['csv']), 'centers__id__in');
        }
        if (centersRegionCitiesIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...centersRegionCitiesIdIn].join(COLLECTION_FORMATS['csv']), 'centers__region__cities__id__in');
        }
        if (centersRegionIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...centersRegionIdIn].join(COLLECTION_FORMATS['csv']), 'centers__region__id__in');
        }
        if (centersRegionManagersIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...centersRegionManagersIdIn].join(COLLECTION_FORMATS['csv']), 'centers__region__managers__id__in');
        }
        if (centersRegionZipCodesCodeIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...centersRegionZipCodesCodeIn].join(COLLECTION_FORMATS['csv']), 'centers__region__zipCodes__code__in');
        }
        if (firstNameContains !== undefined && firstNameContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>firstNameContains, 'firstName__contains');
        }
        if (idIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...idIn].join(COLLECTION_FORMATS['csv']), 'id__in');
        }
        if (lastNameContains !== undefined && lastNameContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lastNameContains, 'lastName__contains');
        }
        if (qualifier !== undefined && qualifier !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>qualifier, 'qualifier');
        }
        if (type !== undefined && type !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>type, 'type');
        }
        if (workWeek !== undefined && workWeek !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>workWeek, 'workWeek');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cookieAuth) required
        localVarCredential = this.configuration.lookupCredential('cookieAuth');
        if (localVarCredential) {
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/service/techs`;
        return this.httpClient.request<Array<Technician>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
